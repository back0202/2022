function solution(rows, columns, queries) {
  const answer = [];
  let arr = Array.from(new Array(rows + 1), () =>
    new Array(columns + 1).fill(0)
  );

  // 숫자 채우기
  for (let i = 1; i <= rows; i++) {
    for (let j = 1; j <= columns; j++) {
      arr[i][j] = (i - 1) * columns + j;
    }
  }

  for (let tc = 0; tc < queries.length; tc++) {
    const [x1, y1, x2, y2] = queries[tc];
    const stack = [];
    // 맨 위 직사각형 고르기 x1은 행 고정, y1이 y2 직전까지 1씩 증가
    for (let i = y1; i < y2; i++) stack.push(arr[x1][i]);
    // 오른쪽 직사각형 고르기 y2는 고정, x1이 x2 직전까지 1씩 증가
    for (let i = x1; i < x2; i++) stack.push(arr[i][y2]);
    // 아래쪽 직사각형 고르기 x2는 고정, y2가 y1 직전까지 1씩 감소
    for (let i = y2; i > y1; i--) stack.push(arr[x2][i]);
    // 왼쪽 직사각형 고르기y1는 고정, x2가 x1 직전까지 1씩 감소
    for (let i = x2; i > x1; i--) stack.push(arr[i][y1]);

    // 정답 찾기
    answer.push(Math.min(...stack));
    const temp = stack.pop();
    stack.unshift(temp);

    for (let i = y1; i < y2; i++) arr[x1][i] = stack.shift();
    for (let i = x1; i < x2; i++) arr[i][y2] = stack.shift();
    for (let i = y2; i > y1; i--) arr[x2][i] = stack.shift();
    for (let i = x2; i > x1; i--) arr[i][y1] = stack.shift();
  }

  return answer;
}

나는 그래프 자리를 먼저 a[x][y] = a[x+1][y+1] 이렇게 할려고 했는데 이렇게 하면 숫자가 a[x][y]의 숫자가 사라져서 안됨
여기서는 자리가 이동하는 숫자들을 stack배열에다 넣고 
가장작은수를 answer에다 넣고
shift를 이용해서 stack에 있는 숫자들을 너었다.

https://velog.io/@sangbooom/Javascript-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0
1부터 36까지 숫자배열 


function solution(rows, columns, queries) {
    const a = [...Array(rows)].map((_, r)=>[...Array(columns)].map((_, c)=>r*columns+c+1));
    const mins = [];

    queries.map(query => {
        const [x1, y1, x2, y2] = query.map(_=>_-1);
        let min = a[x1][y1], tmp = a[x1][y1];

        for(let i=x1;i<x2;i++) {
            a[i][y1] = a[i+1][y1];
            min = Math.min(min, a[i][y1]);
        }
        for(let i=y1;i<y2;i++) {
            a[x2][i] = a[x2][i+1];
            min = Math.min(min, a[x2][i]);
        }
        for(let i=x2;i>x1;i--) {
            a[i][y2] = a[i-1][y2];
            min = Math.min(min, a[i][y2]);
        }
        for(let i=y2;i>y1;i--) {
            a[x1][i] = a[x1][i-1];
            min = Math.min(min, a[x1][i]);
        }
        a[x1][y1+1] = tmp;

        mins.push(min);
    })

    return mins;
}
내가 생각했던 gra[i][j]에 넣을 수도 있네
순서가 역으로 진행 되고 
맨앞 숫자를 미리 빼놓고 73번줄 처럼 미리 뺴놓은걸 넣
